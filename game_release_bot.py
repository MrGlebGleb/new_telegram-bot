import os
import requests
import time
import asyncio
import aioschedule as schedule
from datetime import datetime
from telegram.ext import Application, CommandHandler
from flask import Flask # <-- –î–û–ë–ê–í–õ–ï–ù–û: –∏–º–ø–æ—Ä—Ç –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
import threading # <-- –î–û–ë–ê–í–õ–ï–ù–û: –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ–Ω–µ

# --- –ù–ê–°–¢–†–û–ô–ö–ò (–±—É–¥—É—Ç –±—Ä–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–∞) ---
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
TWITCH_CLIENT_ID = os.environ.get('TWITCH_CLIENT_ID')
TWITCH_CLIENT_SECRET = os.environ.get('TWITCH_CLIENT_SECRET')
CHAT_ID_FILE = 'chat_id.txt'

# --- IGDB API (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def get_igdb_access_token():
    url = f'https://id.twitch.tv/oauth2/token?client_id={TWITCH_CLIENT_ID}&client_secret={TWITCH_CLIENT_SECRET}&grant_type=client_credentials'
    response = requests.post(url)
    response.raise_for_status()
    return response.json()['access_token']

def get_upcoming_significant_games(access_token):
    today_start = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0)
    today_timestamp = int(today_start.timestamp())
    headers = {'Client-ID': TWITCH_CLIENT_ID, 'Authorization': f'Bearer {access_token}'}
    body = (
        f'fields name, summary, cover.url, first_release_date;'
        f'where first_release_date >= {today_timestamp} & first_release_date < {today_timestamp + 86400} & cover != null & hypes > 5;'
        f'sort hypes desc; limit 5;'
    )
    response = requests.post('https://api.igdb.com/v4/games', headers=headers, data=body)
    response.raise_for_status()
    return response.json()

# --- –õ–æ–≥–∏–∫–∞ –±–æ—Ç–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def start(update, context):
    chat_id = update.message.chat_id
    with open(CHAT_ID_FILE, 'w') as f:
        f.write(str(chat_id))
    await update.message.reply_text(
        '–û—Ç–ª–∏—á–Ω–æ! –Ø –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ—Ç —á–∞—Ç –∏ —Ç–µ–ø–µ—Ä—å –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å—é–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã—Ö–æ–¥–µ –∏–≥—Ä. üéÆ'
    )
    print(f"–ë–æ—Ç –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —á–∞—Ç–µ —Å ID: {chat_id}")

def format_game_message(game):
    name = game.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    summary = game.get('summary', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.')
    cover_url = game.get('cover', {}).get('url')
    if cover_url:
        cover_url = 'https:' + cover_url.replace('t_thumb', 't_cover_big')
    message = f"üéÆ **–í–´–®–õ–ê –ò–ì–†–ê: {name}** üéÆ\n\n{summary}\n"
    return message, cover_url

async def send_telegram_message(bot, chat_id, message, photo_url):
    try:
        if photo_url:
            await bot.send_photo(chat_id=chat_id, photo=photo_url, caption=message, parse_mode='Markdown')
        else:
            await bot.send_message(chat_id=chat_id, text=message, parse_mode='Markdown')
        return True
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")
        return False

async def check_for_game_releases(bot):
    print(f"[{datetime.now()}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –Ω–æ–≤—ã—Ö –∏–≥—Ä...")
    if not os.path.exists(CHAT_ID_FILE):
        print("–ë–æ—Ç –µ—â–µ –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–ø—É—Å–∫–∞—é.")
        return
        
    with open(CHAT_ID_FILE, 'r') as f:
        chat_id = f.read().strip()
    try:
        access_token = get_igdb_access_token()
        games = get_upcoming_significant_games(access_token)
        if not games:
            print("–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–Ω–∞—á–∏–º—ã—Ö —Ä–µ–ª–∏–∑–æ–≤.")
            return
        for game in games:
            message, cover_url = format_game_message(game)
            if await send_telegram_message(bot, chat_id, message, cover_url):
                print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–≥—Ä–µ: {game.get('name')}")
            await asyncio.sleep(1)
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–≥—Ä: {e}")

# --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def scheduler(bot):
    schedule.every().day.at("10:00").do(check_for_game_releases, bot=bot)
    print("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00.")
    while True:
        await schedule.run_pending()
        await asyncio.sleep(1)

# --- –ù–û–í–´–ô –ë–õ–û–ö: –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ ---
app = Flask(__name__)
@app.route('/')
def index():
    return "–ë–æ—Ç –∂–∏–≤!"

def run_flask():
    app.run(host='0.0.0.0', port=10000)

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---
async def main():
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–∞–∫ —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    asyncio.create_task(scheduler(application.bot))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥–µ—Ç –∫–æ–º–∞–Ω–¥—ã /start...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await application.run_polling()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –º–µ—à–∞–ª –±–æ—Ç—É
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –±–æ—Ç–∞
    asyncio.run(main())