#!/usr/bin/env python3
"""
Game release Telegram bot with full pagination and pre-caching.
Final version with file_id caching for 100% stable media display.
"""

import os
import requests
import asyncio
import uuid
import urllib.parse
from datetime import datetime, time
from zoneinfo import ZoneInfo
from telegram import constants, Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, InputFile
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    PicklePersistence,
    ContextTypes,
)
import translators as ts
import io

# --- CONFIG (from env) ---
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
TWITCH_CLIENT_ID = os.environ.get("TWITCH_CLIENT_ID")
TWITCH_CLIENT_SECRET = os.environ.get("TWITCH_CLIENT_SECRET")

if not TELEGRAM_BOT_TOKEN or not TWITCH_CLIENT_ID or not TWITCH_CLIENT_SECRET:
    raise RuntimeError("–û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (TOKEN, TWITCH_ID, TWITCH_SECRET) –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–ë–ª–æ–∫–∏—Ä—É—é—â–∏–µ) ---

def translate_text_blocking(text: str) -> str:
    """–ë–ª–æ–∫–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞."""
    if not text: return ""
    try:
        return ts.translate_text(text, translator='google', to_language='ru', timeout=10)
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ translators: {e}")
        return text

def _check_url_blocking(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL –æ–±–ª–æ–∂–∫–∏ (HEAD-–∑–∞–ø—Ä–æ—Å)."""
    if not url: return False
    try:
        r = requests.head(url, timeout=5)
        return 200 <= r.status_code < 400
    except requests.exceptions.RequestException as e:
        print(f"[WARN] Head check failed for {url}: {e}")
        return False

def _download_image_blocking(url: str) -> io.BytesIO | None:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram."""
    try:
        if not url.startswith(('http://', 'https://')):
            print(f"[ERROR] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {url}")
            return None
        
        r = requests.get(url, timeout=10)
        r.raise_for_status()
        return io.BytesIO(r.content)
    except requests.RequestException as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL {url}: {e}")
        return None

def _get_igdb_access_token_blocking():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ—Ç Twitch/IGDB."""
    url = (f"https://id.twitch.tv/oauth2/token?client_id={TWITCH_CLIENT_ID}"
           f"&client_secret={TWITCH_CLIENT_SECRET}&grant_type=client_credentials")
    r = requests.post(url, timeout=15)
    r.raise_for_status()
    return r.json()["access_token"]

def _get_todays_games_blocking(access_token):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö —Ä–µ–ª–∏–∑–æ–≤ (–ª–∏–º–∏—Ç 5)."""
    today_ts = int(datetime.now().replace(hour=0, minute=0, second=0, microsecond=0).timestamp())
    
    headers = {"Client-ID": TWITCH_CLIENT_ID, "Authorization": f"Bearer {access_token}"}
    body = (
        "fields name, summary, cover.url, platforms.name, websites.category, websites.url, aggregated_rating, aggregated_rating_count;"
        f"where first_release_date >= {today_ts} & first_release_date < {today_ts + 86400}"
        " & hypes > 2;"
        "sort hypes desc; limit 5;" # –õ–∏–º–∏—Ç 5
    )
    r = requests.post("https://api.igdb.com/v4/games", headers=headers, data=body, timeout=20)
    r.raise_for_status()
    return r.json()

# --- –§—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö ---

def _parse_trailer(websites_data: list | None) -> str | None:
    """–ù–∞—Ö–æ–¥–∏—Ç URL —Ç—Ä–µ–π–ª–µ—Ä–∞ –Ω–∞ YouTube."""
    if not websites_data: return None
    for site in websites_data:
        if site.get("category") == 9: return site.get("url")
    return None

def _get_rating_emoji(rating: float | None) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç–Ω–æ–π —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ü–µ–Ω–∫–∏."""
    if rating is None: return ""
    if rating >= 75: return "üü¢"
    if rating >= 50: return "üü°"
    if rating > 0: return "üî¥"
    return ""

# --- –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –ò –ü–ê–ì–ò–ù–ê–¶–ò–Ø ---

async def format_game_for_pagination(game_data: dict, current_index: int, total_count: int, list_id: str):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–≥—Ä–µ."""
    name = game_data.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    summary = game_data.get("summary", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
    platforms_data = game_data.get("platforms", [])
    platforms = ", ".join([p["name"] for p in platforms_data if "name" in p])
    trailer_url = game_data.get("trailer_url")
    rating = game_data.get("aggregated_rating")

    text = f"üéÆ *–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–∏—Ç: {name}*\n\n"
    
    if rating:
        emoji = _get_rating_emoji(rating)
        text += f"{emoji} *–†–µ–π—Ç–∏–Ω–≥ Metacritic:* {rating:.0f}/100\n"

    if platforms: text += f"*–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã:* {platforms}\n\n"
    text += summary
    
    keyboard = []
    nav_buttons = []
    if current_index > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_back_{list_id}_{current_index - 1}"))
    
    nav_buttons.append(InlineKeyboardButton(f"[{current_index + 1}/{total_count}]", callback_data="noop"))
    
    if current_index < total_count - 1:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"page_fwd_{list_id}_{current_index + 1}"))
    
    keyboard.append(nav_buttons)
    
    if trailer_url:
        keyboard.append([InlineKeyboardButton("üé¨ –°–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–π–ª–µ—Ä", url=trailer_url)])
    
    return text, InlineKeyboardMarkup(keyboard)

# --- –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ò–ì–† –ò –ö–≠–®–ò–†–û–í–ê–ù–ò–ï ---

async def _get_best_cover_url(game: dict) -> str | None:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª—É—á—à–∏–π URL –æ–±–ª–æ–∂–∫–∏ —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º —Ä–µ—Ç—Ä–∞–µ–º.
    """
    game_name = game.get("name", "No Title")
    final_cover_url: str = None
    
    cover_data = game.get("cover")
    if cover_data and cover_data.get("url"):
        base_url = "https:" + cover_data["url"]
        resolutions = ["t_720p", "t_hd", "t_screenshot_med"]
        max_retries = 3

        for res in resolutions:
            cover_url_attempt = base_url.replace("t_thumb", res)
            
            for attempt in range(max_retries):
                # –î–æ–±–∞–≤–ª—è–µ–º –∫—ç—à-–±–∞—Å—Ç–µ—Ä –¥–ª—è –æ–±—Ö–æ–¥–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
                cache_buster = uuid.uuid4().hex[:6]
                url_with_buster = f"{cover_url_attempt}?v={cache_buster}"
                
                is_available = await asyncio.to_thread(_check_url_blocking, url_with_buster)
                
                if is_available:
                    final_cover_url = url_with_buster
                    print(f"[INFO] –û–±–ª–æ–∂–∫–∞ –¥–ª—è '{game_name}' —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏: {res} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}).")
                    return final_cover_url
                
                if attempt < max_retries - 1:
                    print(f"[WARN] –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è '{game_name}' ({res}). –ü–∞—É–∑–∞ 1—Å.")
                    await asyncio.sleep(1)
            
    return None

async def _enrich_game_data_async(game: dict) -> dict:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –æ–±–æ–≥–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–π –∏–≥—Ä—ã.
    """
    # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π URL –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
    placeholder_url = "https://via.placeholder.com/1280x720.png/2F3136/FFFFFF?text=NO+COVER"
    
    # 1. –ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ URL
    original_cover_url = await _get_best_cover_url(game)
    
    # 2. –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
    summary_ru = await asyncio.to_thread(translate_text_blocking, game.get("summary", ""))

    # 3. –í—ã–±–æ—Ä —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏–ª–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä)
    final_url = original_cover_url if original_cover_url else placeholder_url
    
    # 4. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –±–∞–π—Ç–æ–≤
    image_bytes = await asyncio.to_thread(_download_image_blocking, final_url)

    return {
        **game,
        "summary": summary_ru,
        "trailer_url": _parse_trailer(game.get("websites")),
        "cover_url": original_cover_url, # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
        "image_bytes": image_bytes,      # –ë–∞–π—Ç-–ø–æ—Ç–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –µ—Å—Ç—å)
        "file_id": None                  # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å—Å—è file_id
    }

async def _cache_file_id_and_filter(context: ContextTypes.DEFAULT_TYPE, chat_id: int, enriched_games: list) -> list:
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –º–µ–¥–∏–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ Telegram file_id.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ –∏–≥—Ä—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ.
    """
    final_list = []
    
    for i, game_data in enumerate(enriched_games):
        if not game_data.get("image_bytes"):
            print(f"[WARN] –ò–≥—Ä–∞ '{game_data.get('name')}' (–∏–Ω–¥–µ–∫—Å {i}): –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–π—Ç–æ–≤.")
            continue
        
        caption_text = f"–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞: {game_data.get('name')}..."
        
        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–π—Ç—ã
        game_data["image_bytes"].seek(0)
        
        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è Telegram file_id
            sent_message = await context.bot.send_photo(
                chat_id, 
                photo=game_data["image_bytes"], 
                caption=caption_text
            )
            
            # 2. –ü–æ–ª—É—á–∞–µ–º –∏ –∫—ç—à–∏—Ä—É–µ–º file_id
            game_data["file_id"] = sent_message.photo[-1].file_id
            print(f"[INFO] –£—Å–ø–µ—à–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω file_id –¥–ª—è '{game_data.get('name')}'.")
            
            # 3. –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.delete_message(chat_id=chat_id, message_id=sent_message.message_id)
            
            # 4. –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å –æ—Ç –±–∞–π—Ç–æ–≤, –æ–Ω–∏ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã
            del game_data["image_bytes"] 
            
            final_list.append(game_data)
            await asyncio.sleep(0.5) # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º

        except Exception as e:
            # –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–∞–π—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–±–æ–π Telegram)
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å file_id –¥–ª—è '{game_data.get('name')}': {e}. –ò–≥—Ä–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
            # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —á–∞—Å—Ç–∏—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            try: await context.bot.delete_message(chat_id=chat_id, message_id=sent_message.message_id)
            except: pass
            continue
            
    return final_list


# --- –ö–û–ú–ê–ù–î–´ –ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

async def releases_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–ª–∏–∑–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    chat_id = update.effective_chat.id
    status_message = await update.message.reply_text("üîç –ò—â—É –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Ä–µ–ª–∏–∑—ã...")
    
    try:
        access_token = await asyncio.to_thread(_get_igdb_access_token_blocking)
        base_games = await asyncio.to_thread(_get_todays_games_blocking, access_token)
        
        if not base_games:
            await context.bot.edit_message_text(chat_id=chat_id, message_id=status_message.message_id, text="üéÆ –ó–Ω–∞—á–∏–º—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # 1. –û–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–π—Ç–æ–≤
        tasks = [_enrich_game_data_async(game) for game in base_games]
        enriched_games = await asyncio.gather(*tasks)
            
        # 2. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ file_id –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        final_games = await _cache_file_id_and_filter(context, chat_id, enriched_games)
        
        if not final_games:
            await context.bot.edit_message_text(chat_id=chat_id, message_id=status_message.message_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–¥–∏–∞ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
            
        list_id = str(uuid.uuid4())
        context.bot_data.setdefault('game_lists', {})[list_id] = final_games

        # 3. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ–ø–µ—Ä—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å file_id)
        
        first_game_data = final_games[0]
        text, markup = await format_game_for_pagination(game_data=first_game_data, current_index=0, total_count=len(final_games), list_id=list_id)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞
        if not first_game_data.get("cover_url"):
            text += "\n\n*(–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –æ–±–ª–æ–∂–∫–∞-–∑–∞–≥–ª—É—à–∫–∞)*"

        await context.bot.send_photo(
            chat_id, 
            photo=first_game_data["file_id"], # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π file_id
            caption=text, 
            parse_mode=constants.ParseMode.MARKDOWN, 
            reply_markup=markup
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ò—â—É..."
        await context.bot.delete_message(chat_id=chat_id, message_id=status_message.message_id)

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ releases_command: {e}")
        # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –µ—Å—Ç—å
        try: await context.bot.delete_message(chat_id=chat_id, message_id=status_message.message_id)
        except: pass
        await context.bot.send_message(chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

async def pagination_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¢–û–õ–¨–ö–û –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Telegram file_id.
    """
    query = update.callback_query
    await query.answer()

    try:
        _, direction, list_id, requested_index_str = query.data.split("_")
        current_index = int(requested_index_str)
    except (ValueError, IndexError):
        await query.edit_message_caption(caption="–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.")
        return

    games = context.bot_data.get('game_lists', {}).get(list_id)
    if not games or not (0 <= current_index < len(games)):
        await query.edit_message_caption(caption="–û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /releases.")
        return
    
    game_data = games[current_index]
    
    # 1. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏
    text, markup = await format_game_for_pagination(
        game_data=game_data,
        current_index=current_index,
        total_count=len(games),
        list_id=list_id
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞
    if not game_data.get("cover_url"):
        text += "\n\n*(–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –æ–±–ª–æ–∂–∫–∞-–∑–∞–≥–ª—É—à–∫–∞)*"
        
    # 2. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π file_id (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±)
    cached_file_id = game_data["file_id"] # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –µ—Å—Ç—å –≤ final_games

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º file_id –¥–ª—è InputMediaPhoto
        media = InputMediaPhoto(media=cached_file_id, caption=text, parse_mode=constants.ParseMode.MARKDOWN)
        await query.edit_message_media(media=media, reply_markup=markup)
        print(f"[INFO] –£—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞ –¥–ª—è '{game_data.get('name')}' —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º file_id.")
        return
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª file_id (–æ—á–µ–Ω—å —Ä–µ–¥–∫–∏–π —Å–±–æ–π), –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ñ–æ–ª–±—ç–∫—É
        print(f"[ERROR] –°–±–æ–π –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–¥–∏–∞ —Å file_id: {e}. –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ñ–æ–ª–±—ç–∫—É.")

    # 3. –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–´–ô –§–û–õ–ë–≠–ö: –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏.
    try:
         await query.edit_message_caption(caption=text, parse_mode=constants.ParseMode.MARKDOWN, reply_markup=markup)
         print(f"[INFO] –£—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è '{game_data.get('name')}' (–∏–Ω–¥–µ–∫—Å {current_index}).")
    except Exception as edit_caption_e:
         print(f"[ERROR] –°–±–æ–π –¥–∞–∂–µ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {edit_caption_e}")
         await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ /releases –∑–∞–Ω–æ–≤–æ.", show_alert=True)
    return

async def daily_check_job(context: ContextTypes.DEFAULT_TYPE):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Ä–µ–ª–∏–∑–æ–≤."""
    print(f"[{datetime.now().isoformat()}] –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ª–∏–∑–æ–≤")
    chat_ids = context.bot_data.get("chat_ids", [])
    if not chat_ids:
        print("[INFO] –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤, –ø—Ä–æ–ø—É—Å–∫.")
        return
    
    try:
        access_token = await asyncio.to_thread(_get_igdb_access_token_blocking)
        base_games = await asyncio.to_thread(_get_todays_games_blocking, access_token)
        if not base_games:
            print("[INFO] –†–µ–ª–∏–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç.")
            return

        # 1. –û–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–π—Ç–æ–≤ (–¥–µ–ª–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤)
        tasks = [_enrich_game_data_async(game) for game in base_games]
        enriched_games = await asyncio.gather(*tasks)
        
        # 2. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ file_id –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        # –ü–æ—Å–∫–æ–ª—å–∫—É –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —á–∞—Ç–æ–º, –º—ã –¥–µ–ª–∞–µ–º —ç—Ç–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ 
        # –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —á–∞—Ç–∞, –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º file_id –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö.
        
        if not enriched_games or not enriched_games[0].get("image_bytes"):
             print("[INFO] –í—Å–µ –∏–≥—Ä—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫—É –±–∞–π—Ç–æ–≤. –ü—Ä–æ–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏.")
             return
             
        # –ö—ç—à–∏—Ä—É–µ–º –≤ –ø–µ—Ä–≤–æ–º —á–∞—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å file_id
        first_chat_id = chat_ids[0]
        print(f"[INFO] –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ file_id –≤ —á–∞—Ç–µ {first_chat_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å file_id
        cached_games = await _cache_file_id_and_filter(context, first_chat_id, enriched_games)

        if not cached_games:
            print("[INFO] –ù–µ —É–¥–∞–ª–æ—Å—å –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω—É –∏–≥—Ä—É. –ü—Ä–æ–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏.")
            return
            
        print(f"[INFO] –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ ({len(cached_games)} –∏–≥—Ä) –≤ {len(chat_ids)} —á–∞—Ç–æ–≤.")
        
        # 3. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º
        for chat_id in chat_ids:
            list_id = str(uuid.uuid4())
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            context.bot_data.setdefault('game_lists', {})[list_id] = cached_games
            
            for i, game_data in enumerate(cached_games):
                
                text, markup = await format_game_for_pagination(
                    game_data=game_data,
                    current_index=i,
                    total_count=len(cached_games),
                    list_id=list_id
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞
                if not game_data.get("cover_url"):
                    text += "\n\n*(–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –æ–±–ª–æ–∂–∫–∞-–∑–∞–≥–ª—É—à–∫–∞)*"

                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π file_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                    await context.bot.send_photo(
                        chat_id, 
                        photo=game_data["file_id"], 
                        caption=text, 
                        parse_mode=constants.ParseMode.MARKDOWN, 
                        reply_markup=markup
                    )
                except Exception as e:
                    print(f"[ERROR] Daily send: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ file_id –≤ —á–∞—Ç {chat_id}: {e}")
                
                await asyncio.sleep(1.0) # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏

    except Exception as e:
        print(f"[ERROR] –°–±–æ–π –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–µ: {e}")


# --- –°–ë–û–†–ö–ê –ò –ó–ê–ü–£–°–ö ---
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    persistence = PicklePersistence(filepath="bot_data.pkl")
    application = (
        Application.builder()
        .token(TELEGRAM_BOT_TOKEN)
        .persistence(persistence)
        .build()
    )

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("releases", releases_command))
    application.add_handler(CallbackQueryHandler(pagination_handler, pattern="^page_(fwd|back)_"))
    application.add_handler(CallbackQueryHandler(lambda u, c: u.callback_query.answer(), pattern="^noop$"))

    # –î–æ–±–∞–≤–ª—è–µ–º JobQueue
    tz = ZoneInfo("Europe/Moscow")
    scheduled_time = time(hour=11, minute=0, tzinfo=tz)
    
    current_jobs = application.job_queue.get_jobs_by_name("daily_game_check")
    if current_jobs:
        for job in current_jobs:
            job.schedule_removal()
            
    application.job_queue.run_daily(daily_check_job, scheduled_time, name="daily_game_check")

    print("[INFO] –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling(allowed_updates=Update.ALL_TYPES, timeout=30)


if __name__ == "__main__":
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è start_command, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –Ω–µ –±—ã–ª–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ
    async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —á–∞—Ç –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)."""
        chat_id = update.effective_chat.id
        chat_ids = context.bot_data.setdefault("chat_ids", [])
        if chat_id not in chat_ids:
            chat_ids.append(chat_id)
            await update.message.reply_text("‚úÖ –û–∫, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ—Ç —á–∞—Ç –∏ –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–ª–∏–∑–∞—Ö.")
            print(f"[INFO] –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω chat_id {chat_id}")
        else:
            await update.message.reply_text("–≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏.")
            
    main()
