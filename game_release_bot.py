#!/usr/bin/env python3
"""
Game release Telegram bot with full pagination and pre-caching.
"""

import os
import requests
import asyncio
import uuid
import urllib.parse
from datetime import datetime, time
from zoneinfo import ZoneInfo
from telegram import constants, Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    PicklePersistence,
    ContextTypes,
)
import translators as ts

# --- CONFIG (from env) ---
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
TWITCH_CLIENT_ID = os.environ.get("TWITCH_CLIENT_ID")
TWITCH_CLIENT_SECRET = os.environ.get("TWITCH_CLIENT_SECRET")

if not TELEGRAM_BOT_TOKEN or not TWITCH_CLIENT_ID or not TWITCH_CLIENT_SECRET:
    raise RuntimeError("–û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (TOKEN, TWITCH_ID, TWITCH_SECRET) –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def translate_text_blocking(text: str) -> str:
    """–ë–ª–æ–∫–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞."""
    if not text: return ""
    try:
        return ts.translate_text(text, translator='google', to_language='ru')
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ translators: {e}")
        return text

def _get_igdb_access_token_blocking():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ—Ç Twitch/IGDB."""
    url = (f"https://id.twitch.tv/oauth2/token?client_id={TWITCH_CLIENT_ID}"
           f"&client_secret={TWITCH_CLIENT_SECRET}&grant_type=client_credentials")
    r = requests.post(url, timeout=15)
    r.raise_for_status()
    return r.json()["access_token"]

def _get_todays_games_blocking(access_token):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö —Ä–µ–ª–∏–∑–æ–≤ (–±–ª–æ–∫–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)."""
    today_ts = int(datetime.now().replace(hour=0, minute=0, second=0, microsecond=0).timestamp())
    headers = {"Client-ID": TWITCH_CLIENT_ID, "Authorization": f"Bearer {access_token}"}
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
    body = (
        "fields name, summary, cover.url, platforms.name, websites.category, websites.url, aggregated_rating, aggregated_rating_count;"
        f"where first_release_date >= {today_ts} & first_release_date < {today_ts + 86400}"
        " & hypes > 2;"
        "sort hypes desc; limit 10;"
    )
    r = requests.post("https://api.igdb.com/v4/games", headers=headers, data=body, timeout=20)
    r.raise_for_status()
    return r.json()

# --- –§—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö ---

def _parse_trailer(websites_data: list | None) -> str | None:
    """–ù–∞—Ö–æ–¥–∏—Ç URL —Ç—Ä–µ–π–ª–µ—Ä–∞ –Ω–∞ YouTube –≤ —Å–ø–∏—Å–∫–µ —Å–∞–π—Ç–æ–≤."""
    if not websites_data:
        return None
    for site in websites_data:
        if site.get("category") == 9: # –ö–∞—Ç–µ–≥–æ—Ä–∏—è 9 –≤ IGDB API - —ç—Ç–æ YouTube
            return site.get("url")
    return None

def _get_rating_emoji(rating: float | None) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç–Ω–æ–π —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ü–µ–Ω–∫–∏."""
    if rating is None: return ""
    if rating >= 75: return "üü¢"
    if rating >= 50: return "üü°"
    if rating > 0: return "üî¥"
    return ""

# --- –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –ò –ü–ê–ì–ò–ù–ê–¶–ò–Ø ---

async def format_game_for_pagination(game_data: dict, current_index: int, total_count: int, list_id: str):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–≥—Ä–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    name = game_data.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    summary = game_data.get("summary", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
    cover_url = game_data.get("cover_url")
    platforms_data = game_data.get("platforms", [])
    platforms = ", ".join([p["name"] for p in platforms_data if "name" in p])
    trailer_url = game_data.get("trailer_url")
    rating = game_data.get("aggregated_rating")

    text = f"üéÆ *–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–∏—Ç: {name}*\n\n"
    
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if rating:
        emoji = _get_rating_emoji(rating)
        text += f"{emoji} *–†–µ–π—Ç–∏–Ω–≥ Metacritic:* {rating:.0f}/100\n"

    if platforms: text += f"*–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã:* {platforms}\n\n"
    text += summary
    
    keyboard = []
    nav_buttons = []
    if current_index > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_back_{list_id}_{current_index - 1}"))
    
    nav_buttons.append(InlineKeyboardButton(f"[{current_index + 1}/{total_count}]", callback_data="noop"))
    
    if current_index < total_count - 1:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"page_fwd_{list_id}_{current_index + 1}"))
    
    keyboard.append(nav_buttons)
    
    if trailer_url:
        keyboard.append([InlineKeyboardButton("üé¨ –°–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–π–ª–µ—Ä", url=trailer_url)])
    
    return text, cover_url, InlineKeyboardMarkup(keyboard)

# --- –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ò–ì–† ---

async def _enrich_game_data_async(game: dict) -> dict:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –æ–±–æ–≥–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–π –∏–≥—Ä—ã.
    –ï—Å–ª–∏ –æ–±–ª–æ–∂–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç URL-–∑–∞–≥–ª—É—à–∫—É.
    """
    game_name = game.get("name", "No Title")
    final_cover_url: str

    cover_data = game.get("cover")
    if not cover_data or not cover_data.get("url"):
        print(f"[INFO] –î–ª—è –∏–≥—Ä—ã '{game_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –æ–±–ª–æ–∂–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä.")
        encoded_name = urllib.parse.quote(game_name)
        final_cover_url = f"https://via.placeholder.com/1280x720.png/2F3136/FFFFFF?text={encoded_name}"
    else:
        cover_url = "https:" + cover_data["url"].replace("t_thumb", "t_720p")
        cache_buster = uuid.uuid4().hex[:6]
        final_cover_url = f"{cover_url}?v={cache_buster}"

    summary_ru = await asyncio.to_thread(translate_text_blocking, game.get("summary", ""))

    return {
        **game,
        "summary": summary_ru,
        "trailer_url": _parse_trailer(game.get("websites")),
        "cover_url": final_cover_url
    }

# --- –ö–û–ú–ê–ù–î–´ –ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —á–∞—Ç –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
    chat_id = update.effective_chat.id
    chat_ids = context.bot_data.setdefault("chat_ids", [])

    if chat_id not in chat_ids:
        chat_ids.append(chat_id)
        await update.message.reply_text(
            f"‚úÖ –û–∫, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ—Ç —á–∞—Ç ({chat_id}) –∏ –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å—é–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–ª–∏–∑–∞—Ö."
        )
        print(f"[INFO] –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω chat_id {chat_id}")
    else:
        await update.message.reply_text("–≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏.")

async def releases_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–ª–∏–∑–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    chat_id = update.effective_chat.id
    await update.message.reply_text("üîç –ò—â—É –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Ä–µ–ª–∏–∑—ã... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
    
    try:
        access_token = await asyncio.to_thread(_get_igdb_access_token_blocking)
        base_games = await asyncio.to_thread(_get_todays_games_blocking, access_token)
        
        if not base_games:
            await context.bot.send_message(chat_id, text="üéÆ –ó–Ω–∞—á–∏–º—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        tasks = [_enrich_game_data_async(game) for game in base_games]
        enriched_games = await asyncio.gather(*tasks)
            
        list_id = str(uuid.uuid4())
        context.bot_data.setdefault('game_lists', {})[list_id] = enriched_games
        
        message_sent = False
        for i, game_data in enumerate(enriched_games):
            text, cover, markup = await format_game_for_pagination(
                game_data=game_data,
                current_index=i,
                total_count=len(enriched_games),
                list_id=list_id
            )
            try:
                await context.bot.send_photo(chat_id, photo=cover, caption=text, parse_mode=constants.ParseMode.MARKDOWN, reply_markup=markup)
                message_sent = True
                break
            except Exception as e:
                print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è '{game_data.get('name')}': {e}")
                continue
        
        if not message_sent:
            await context.bot.send_message(chat_id, text="üéÆ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –µ—Å—Ç—å —Ä–µ–ª–∏–∑—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–ª—è –Ω–∏—Ö –æ–±–ª–æ–∂–∫–∏.")

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ releases_command: {e}")
        await context.bot.send_message(chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

async def pagination_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–æ–ø—É—Å–∫–æ–º '–±–∏—Ç—ã—Ö' –æ–±–ª–æ–∂–µ–∫."""
    query = update.callback_query
    await query.answer()

    try:
        _, direction, list_id, requested_index_str = query.data.split("_")
        current_index = int(requested_index_str)
        step = 1 if direction == "fwd" else -1
    except (ValueError, IndexError):
        await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.")
        return

    games = context.bot_data.get('game_lists', {}).get(list_id)
    if not games:
        await query.edit_message_text("–û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞—Ä–µ–ª. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /releases.")
        return
        
    while 0 <= current_index < len(games):
        game_data = games[current_index]
        
        text, cover, markup = await format_game_for_pagination(
            game_data=game_data,
            current_index=current_index,
            total_count=len(games),
            list_id=list_id
        )

        try:
            media = InputMediaPhoto(media=cover, caption=text, parse_mode=constants.ParseMode.MARKDOWN)
            await query.edit_message_media(media=media, reply_markup=markup)
            return
        except Exception as e:
            error_text = str(e).lower()
            if "wrong type of the web page content" in error_text or "failed to get http url content" in error_text:
                print(f"[WARN] –ü—Ä–æ–ø—É—Å–∫ '{game_data.get('name')}' (–∏–Ω–¥–µ–∫—Å {current_index}) –∏–∑-–∑–∞ –±–∏—Ç–æ–π –æ–±–ª–æ–∂–∫–∏.")
                current_index += step
                continue
            else:
                print(f"[ERROR] –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
                await context.bot.send_message(
                    chat_id=query.effective_chat.id,
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–Ω–æ–≤–æ: /releases"
                )
                return
    
    print("[INFO] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ '–±–∏—Ç—ã—Ö' –æ–±–ª–æ–∂–µ–∫.")


async def daily_check_job(context: ContextTypes.DEFAULT_TYPE):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Ä–µ–ª–∏–∑–æ–≤."""
    print(f"[{datetime.now().isoformat()}] –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ª–∏–∑–æ–≤")
    chat_ids = context.bot_data.get("chat_ids", [])
    if not chat_ids:
        print("[INFO] –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤, –ø—Ä–æ–ø—É—Å–∫.")
        return
    
    try:
        access_token = await asyncio.to_thread(_get_igdb_access_token_blocking)
        base_games = await asyncio.to_thread(_get_todays_games_blocking, access_token)
        if not base_games:
            print("[INFO] –†–µ–ª–∏–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç.")
            return

        tasks = [_enrich_game_data_async(game) for game in base_games]
        enriched_games = await asyncio.gather(*tasks)
        
        if not enriched_games:
            print("[INFO] –†–µ–ª–∏–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            return

        print(f"[INFO] –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ –≤ {len(chat_ids)} —á–∞—Ç–æ–≤.")
        for chat_id in chat_ids:
            list_id = str(uuid.uuid4())
            context.bot_data.setdefault('game_lists', {})[list_id] = enriched_games
            
            message_sent = False
            for i, game_data in enumerate(enriched_games):
                text, cover, markup = await format_game_for_pagination(
                    game_data=game_data,
                    current_index=i,
                    total_count=len(enriched_games),
                    list_id=list_id
                )
                try:
                    await context.bot.send_photo(chat_id, photo=cover, caption=text, parse_mode=constants.ParseMode.MARKDOWN, reply_markup=markup)
                    message_sent = True
                    await asyncio.sleep(0.5)
                    break 
                except Exception as e:
                    print(f"[WARN] Daily send: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è '{game_data.get('name')}' –≤ —á–∞—Ç {chat_id}: {e}")
                    continue
            
            if not message_sent:
                print(f"[WARN] Daily send: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –∏–≥—Ä—ã –≤ —á–∞—Ç {chat_id}")

    except Exception as e:
        print(f"[ERROR] –°–±–æ–π –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–µ: {e}")


# --- –°–ë–û–†–ö–ê –ò –ó–ê–ü–£–°–ö ---
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    persistence = PicklePersistence(filepath="bot_data.pkl")
    application = (
        Application.builder()
        .token(TELEGRAM_BOT_TOKEN)
        .persistence(persistence)
        .build()
    )

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("releases", releases_command))
    application.add_handler(CallbackQueryHandler(pagination_handler, pattern="^page_(fwd|back)_"))
    application.add_handler(CallbackQueryHandler(lambda u, c: u.callback_query.answer(), pattern="^noop$"))

    tz = ZoneInfo("Europe/Moscow")
    scheduled_time = time(hour=11, minute=0, tzinfo=tz)
    application.job_queue.run_daily(daily_check_job, scheduled_time, name="daily_game_check")

    print("[INFO] –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()

