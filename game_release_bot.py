#!/usr/bin/env python3
"""
Game release Telegram bot with full pagination and pre-caching.
"""

import os
import requests
import asyncio
import uuid
import urllib.parse
from datetime import datetime, time
from zoneinfo import ZoneInfo
from telegram import constants, Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    PicklePersistence,
    ContextTypes,
)
import translators as ts

# --- CONFIG (from env) ---
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
TWITCH_CLIENT_ID = os.environ.get("TWITCH_CLIENT_ID")
TWITCH_CLIENT_SECRET = os.environ.get("TWITCH_CLIENT_SECRET")

if not TELEGRAM_BOT_TOKEN or not TWITCH_CLIENT_ID or not TWITCH_CLIENT_SECRET:
    raise RuntimeError("–û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (TOKEN, TWITCH_ID, TWITCH_SECRET) –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def translate_text_blocking(text: str) -> str:
    """–ë–ª–æ–∫–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞."""
    if not text: return ""
    try:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç, —Ç–∞–∫ –∫–∞–∫ –ø–µ—Ä–µ–≤–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–º
        return ts.translate_text(text, translator='google', to_language='ru', timeout=10)
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ translators: {e}")
        return text

def _check_url_blocking(url: str) -> bool:
    """
    –ë–ª–æ–∫–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL –æ–±–ª–æ–∂–∫–∏ 
    —Å –ø–æ–º–æ—â—å—é HEAD-–∑–∞–ø—Ä–æ—Å–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Telegram.
    """
    if not url: return False
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º HEAD, —á—Ç–æ–±—ã –Ω–µ —Å–∫–∞—á–∏–≤–∞—Ç—å –≤—Å–µ —Ç–µ–ª–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        r = requests.head(url, timeout=5)
        # –£—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å (200-399)
        return 200 <= r.status_code < 400
    except requests.exceptions.RequestException as e:
        # –û—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ DNS
        print(f"[WARN] Head check failed for {url}: {e}")
        return False

def _get_igdb_access_token_blocking():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ—Ç Twitch/IGDB."""
    url = (f"https://id.twitch.tv/oauth2/token?client_id={TWITCH_CLIENT_ID}"
           f"&client_secret={TWITCH_CLIENT_SECRET}&grant_type=client_credentials")
    r = requests.post(url, timeout=15)
    r.raise_for_status()
    return r.json()["access_token"]

def _get_todays_games_blocking(access_token):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö —Ä–µ–ª–∏–∑–æ–≤ (–±–ª–æ–∫–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)."""
    # –£—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ IGDB —Ö—Ä–∞–Ω–∏—Ç –¥–∞—Ç—ã –≤ UTC. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Ç–æ—á–Ω–æ –ø–æ –ú–æ—Å–∫–≤–µ, –º–æ–∂–Ω–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.
    today_ts = int(datetime.now().replace(hour=0, minute=0, second=0, microsecond=0).timestamp())
    
    headers = {"Client-ID": TWITCH_CLIENT_ID, "Authorization": f"Bearer {access_token}"}
    body = (
        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ –ø–æ–ª–µ–π, —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å –ª–∏—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
        "fields name, summary, cover.url, platforms.name, websites.category, websites.url, aggregated_rating, aggregated_rating_count;"
        f"where first_release_date >= {today_ts} & first_release_date < {today_ts + 86400}"
        " & hypes > 2;"
        "sort hypes desc; limit 5;" # –õ–∏–º–∏—Ç —É–º–µ–Ω—å—à–µ–Ω –¥–æ 5
    )
    r = requests.post("https://api.igdb.com/v4/games", headers=headers, data=body, timeout=20)
    r.raise_for_status()
    return r.json()

# --- –§—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö ---

def _parse_trailer(websites_data: list | None) -> str | None:
    """–ù–∞—Ö–æ–¥–∏—Ç URL —Ç—Ä–µ–π–ª–µ—Ä–∞ –Ω–∞ YouTube –≤ —Å–ø–∏—Å–∫–µ —Å–∞–π—Ç–æ–≤."""
    if not websites_data:
        return None
    for site in websites_data:
        if site.get("category") == 9: # –ö–∞—Ç–µ–≥–æ—Ä–∏—è 9 –≤ IGDB API - —ç—Ç–æ YouTube
            return site.get("url")
    return None

def _get_rating_emoji(rating: float | None) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç–Ω–æ–π —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ü–µ–Ω–∫–∏."""
    if rating is None: return ""
    if rating >= 75: return "üü¢"
    if rating >= 50: return "üü°"
    if rating > 0: return "üî¥"
    return ""

# --- –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –ò –ü–ê–ì–ò–ù–ê–¶–ò–Ø ---

async def format_game_for_pagination(game_data: dict, current_index: int, total_count: int, list_id: str):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–≥—Ä–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    name = game_data.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    summary = game_data.get("summary", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'cover_url' –¥–ª—è —Ñ–æ—Ç–æ, 'placeholder_url' –¥–ª—è –∑–∞–≥–ª—É—à–∫–∏ (–µ—Å–ª–∏ –æ–±–ª–æ–∂–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è)
    cover_url = game_data.get("cover_url")
    placeholder_url = game_data.get("placeholder_url")

    platforms_data = game_data.get("platforms", [])
    platforms = ", ".join([p["name"] for p in platforms_data if "name" in p])
    trailer_url = game_data.get("trailer_url")
    rating = game_data.get("aggregated_rating")

    text = f"üéÆ *–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–∏—Ç: {name}*\n\n"
    
    if rating:
        emoji = _get_rating_emoji(rating)
        text += f"{emoji} *–†–µ–π—Ç–∏–Ω–≥ Metacritic:* {rating:.0f}/100\n"

    if platforms: text += f"*–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã:* {platforms}\n\n"
    text += summary
    
    keyboard = []
    nav_buttons = []
    if current_index > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_back_{list_id}_{current_index - 1}"))
    
    nav_buttons.append(InlineKeyboardButton(f"[{current_index + 1}/{total_count}]", callback_data="noop"))
    
    if current_index < total_count - 1:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"page_fwd_{list_id}_{current_index + 1}"))
    
    keyboard.append(nav_buttons)
    
    if trailer_url:
        keyboard.append([InlineKeyboardButton("üé¨ –°–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–π–ª–µ—Ä", url=trailer_url)])
    
    return text, cover_url, placeholder_url, InlineKeyboardMarkup(keyboard)

# --- –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ò–ì–† ---

async def _enrich_game_data_async(game: dict) -> dict:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –æ–±–æ–≥–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–π –∏–≥—Ä—ã.
    –í–∫–ª—é—á–∞–µ—Ç –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–µ—Ç—Ä–∞–π –∏ –ø–æ–¥–±–æ—Ä —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –æ–±–ª–æ–∂–∫–∏.
    """
    game_name = game.get("name", "No Title")
    final_cover_url: str = None
    
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π URL –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è Telegram
    placeholder_url = "https://via.placeholder.com/1280x720.png/2F3136/FFFFFF?text=NO+COVER"


    cover_data = game.get("cover")
    if cover_data and cover_data.get("url"):
        base_url = "https:" + cover_data["url"]
        # –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –ø–æ–¥–±–æ—Ä–∞. –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–∞–º–æ–≥–æ –≤—ã—Å–æ–∫–æ–≥–æ.
        resolutions = ["t_720p", "t_hd", "t_screenshot_med"]
        max_retries = 3

        for res in resolutions:
            cover_url_attempt = base_url.replace("t_thumb", res)
            
            # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
            for attempt in range(max_retries):
                cache_buster = uuid.uuid4().hex[:6]
                url_with_buster = f"{cover_url_attempt}?v={cache_buster}"
                
                # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ–±–ª–æ–∂–∫–∏
                is_available = await asyncio.to_thread(_check_url_blocking, url_with_buster)
                
                if is_available:
                    final_cover_url = url_with_buster
                    print(f"[INFO] –û–±–ª–æ–∂–∫–∞ –¥–ª—è '{game_name}' —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏: {res} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}).")
                    break # –£—Å–ø–µ—Ö, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ü–∏–∫–ª–∞ —Ä–µ—Ç—Ä–∞–µ–≤
                
                if attempt < max_retries - 1:
                    print(f"[WARN] –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è '{game_name}' ({res}). –ü–∞—É–∑–∞ 1—Å.")
                    await asyncio.sleep(1) # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            
            if final_cover_url:
                break # –£—Å–ø–µ—Ö, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π

    if not final_cover_url:
         print(f"[WARN] –û–±–ª–æ–∂–∫–∞ –¥–ª—è '{game_name}' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∏ –≤ –æ–¥–Ω–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä.")


    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
    summary_ru = await asyncio.to_thread(translate_text_blocking, game.get("summary", ""))

    return {
        **game,
        "summary": summary_ru,
        "trailer_url": _parse_trailer(game.get("websites")),
        "cover_url": final_cover_url, # –ú–æ–∂–µ—Ç –±—ã—Ç—å None, –µ—Å–ª–∏ –Ω–µ—Ç –æ–±–ª–æ–∂–∫–∏
        "placeholder_url": placeholder_url # –í—Å–µ–≥–¥–∞ –µ—Å—Ç—å URL –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
    }

# --- –ö–û–ú–ê–ù–î–´ –ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —á–∞—Ç –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
    chat_id = update.effective_chat.id
    chat_ids = context.bot_data.setdefault("chat_ids", [])

    if chat_id not in chat_ids:
        chat_ids.append(chat_id)
        await update.message.reply_text(
            f"‚úÖ –û–∫, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ—Ç —á–∞—Ç ({chat_id}) –∏ –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å—é–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–ª–∏–∑–∞—Ö."
        )
        print(f"[INFO] –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω chat_id {chat_id}")
    else:
        await update.message.reply_text("–≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏.")

async def releases_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–ª–∏–∑–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    chat_id = update.effective_chat.id
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è "–ò—â—É..."
    await update.message.reply_text("üîç –ò—â—É –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Ä–µ–ª–∏–∑—ã... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
    
    try:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∏–≥—Ä, –µ—Å–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ–π–¥—É—Ç
        access_token = await asyncio.to_thread(_get_igdb_access_token_blocking)
        base_games = await asyncio.to_thread(_get_todays_games_blocking, access_token)
        
        if not base_games:
            await context.bot.send_message(chat_id, text="üéÆ –ó–Ω–∞—á–∏–º—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        tasks = [_enrich_game_data_async(game) for game in base_games]
        enriched_games = await asyncio.gather(*tasks)
            
        list_id = str(uuid.uuid4())
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¢–û–õ–¨–ö–û –û–ë–û–ì–ê–©–ï–ù–ù–´–ï –∏–≥—Ä—ã. –í–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç: –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—ã –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ.
        context.bot_data.setdefault('game_lists', {})[list_id] = enriched_games
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –∏–≥—Ä—É, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
        first_game_index = 0
        current_game_data = enriched_games[first_game_index]

        text, cover, placeholder, markup = await format_game_for_pagination(
            game_data=current_game_data,
            current_index=first_game_index,
            total_count=len(enriched_games),
            list_id=list_id
        )
        
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –∏–≥—Ä—É, –ø—ã—Ç–∞—è—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ, –Ω–æ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            # 1. –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –æ–±–ª–æ–∂–∫–æ–π
            if cover:
                await context.bot.send_photo(
                    chat_id, 
                    photo=cover, 
                    caption=text, 
                    parse_mode=constants.ParseMode.MARKDOWN, 
                    reply_markup=markup
                )
            else:
                # 2. –ï—Å–ª–∏ –æ–±–ª–æ–∂–∫–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–º
                await context.bot.send_photo(
                    chat_id, 
                    photo=placeholder, 
                    caption=text + "\n\n*(–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–ª–æ–∂–∫—É)*", 
                    parse_mode=constants.ParseMode.MARKDOWN, 
                    reply_markup=markup
                )
        except Exception as e:
            # 3. –ï—Å–ª–∏ –¥–∞–∂–µ —Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–º –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–±–ª–µ–º–∞ —Å Telegram –∏–ª–∏ chat_id), 
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∏—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó –§–û–¢–û. –ò–≥—Ä–∞ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è!
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ/–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–ª—è '{current_game_data.get('name')}'. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞. –û—à–∏–±–∫–∞: {e}")
            await context.bot.send_message(
                chat_id, 
                text=text + "\n\n*(–û–±–ª–æ–∂–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)*", 
                parse_mode=constants.ParseMode.MARKDOWN, 
                reply_markup=markup
            )


    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ releases_command: {e}")
        await context.bot.send_message(chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

async def pagination_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
    –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–∫–ª—é—á–∞–µ—Ç —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ–ª–±—ç–∫ –ø—Ä–∏ —Å–±–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞.
    """
    query = update.callback_query
    await query.answer()

    try:
        _, direction, list_id, requested_index_str = query.data.split("_")
        current_index = int(requested_index_str)
    except (ValueError, IndexError):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_message_caption, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
        await query.edit_message_caption(caption="–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.")
        return

    games = context.bot_data.get('game_lists', {}).get(list_id)
    if not games:
        await query.edit_message_caption(caption="–û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞—Ä–µ–ª. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /releases.")
        return
    
    if not (0 <= current_index < len(games)):
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –≤—ã—Ö–æ–¥–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞
        await query.answer("–≠—Ç–æ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞!", show_alert=False)
        return

    game_data = games[current_index]
    
    text, cover, placeholder, markup = await format_game_for_pagination(
        game_data=game_data,
        current_index=current_index,
        total_count=len(games),
        list_id=list_id
    )

    # 1. –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ú —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å)
    if cover:
        try:
            media = InputMediaPhoto(media=cover, caption=text, parse_mode=constants.ParseMode.MARKDOWN)
            await query.edit_message_media(media=media, reply_markup=markup)
            return
        except Exception as e:
            error_text = str(e).lower()
            if "wrong type of the web page content" in error_text or "failed to get http url content" in error_text:
                print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è '{game_data.get('name')}' (–∏–Ω–¥–µ–∫—Å {current_index}). –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä.")
                # –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±–ª–æ–∂–∫–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É 2
            else:
                print(f"[ERROR] –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (—Ñ–æ—Ç–æ): {e}")
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –æ–±–ª–æ–∂–∫–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É 3
    
    # 2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –°–¢–ê–¢–ò–ß–ï–°–ö–û–ì–û –ü–õ–ï–ô–°–•–û–õ–î–ï–†–ê
    try:
        placeholder_caption = text + "\n\n*(–û–±–ª–æ–∂–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)*"
        media = InputMediaPhoto(media=placeholder, caption=placeholder_caption, parse_mode=constants.ParseMode.MARKDOWN)
        await query.edit_message_media(media=media, reply_markup=markup)
        return
    except Exception as e:
        print(f"[ERROR] –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä): {e}")
        
        # 3. –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–´–ô –§–û–õ–ë–≠–ö: –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏. –ú–µ–¥–∏–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å.
        final_caption = text + "\n\n*(–û–±–ª–æ–∂–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.)*"
        try:
             await query.edit_message_caption(caption=final_caption, parse_mode=constants.ParseMode.MARKDOWN, reply_markup=markup)
             print(f"[INFO] –£—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è '{game_data.get('name')}' (–∏–Ω–¥–µ–∫—Å {current_index}).")
        except Exception as edit_caption_e:
             # –ï—Å–ª–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ)
             print(f"[ERROR] –°–±–æ–π –¥–∞–∂–µ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {edit_caption_e}")
             await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ /releases –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return
    
# --- –ï–ñ–ï–î–ù–ï–í–ù–ê–Ø –ó–ê–î–ê–ß–ê (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ releases_command) ---

async def daily_check_job(context: ContextTypes.DEFAULT_TYPE):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Ä–µ–ª–∏–∑–æ–≤."""
    print(f"[{datetime.now().isoformat()}] –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ª–∏–∑–æ–≤")
    chat_ids = context.bot_data.get("chat_ids", [])
    if not chat_ids:
        print("[INFO] –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤, –ø—Ä–æ–ø—É—Å–∫.")
        return
    
    try:
        access_token = await asyncio.to_thread(_get_igdb_access_token_blocking)
        base_games = await asyncio.to_thread(_get_todays_games_blocking, access_token)
        if not base_games:
            print("[INFO] –†–µ–ª–∏–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç.")
            return

        tasks = [_enrich_game_data_async(game) for game in base_games]
        enriched_games = await asyncio.gather(*tasks)
        
        if not enriched_games:
            print("[INFO] –†–µ–ª–∏–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            return

        print(f"[INFO] –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ –≤ {len(chat_ids)} —á–∞—Ç–æ–≤.")
        for chat_id in chat_ids:
            list_id = str(uuid.uuid4())
            context.bot_data.setdefault('game_lists', {})[list_id] = enriched_games
            
            # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–°–ï –∏–≥—Ä—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏, –∏—Å–ø–æ–ª—å–∑—É—è –∑–∞–≥–ª—É—à–∫—É, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –≥—Ä—É–∑–∏—Ç—Å—è
            for i, game_data in enumerate(enriched_games):
                text, cover, placeholder, markup = await format_game_for_pagination(
                    game_data=game_data,
                    current_index=i,
                    total_count=len(enriched_games),
                    list_id=list_id
                )
                
                # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–≥—Ä—É, –ø—ã—Ç–∞—è—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ, –Ω–æ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_sent = False
                
                # 1. –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –æ–±–ª–æ–∂–∫–æ–π
                if cover:
                    try:
                        await context.bot.send_photo(chat_id, photo=cover, caption=text, parse_mode=constants.ParseMode.MARKDOWN, reply_markup=markup)
                        message_sent = True
                    except Exception as e:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å –æ–±–ª–æ–∂–∫–æ–π, –ø–µ—á–∞—Ç–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—É
                        print(f"[WARN] Daily send: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è '{game_data.get('name')}' –≤ —á–∞—Ç {chat_id}. –ü–æ–ø—ã—Ç–∫–∞ —Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–º. –û—à–∏–±–∫–∞: {e}")
                
                # 2. –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å –æ–±–ª–æ–∂–∫–æ–π –∏–ª–∏ –æ–±–ª–æ–∂–∫–∏ –Ω–µ –±—ã–ª–æ, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–º
                if not message_sent:
                    try:
                        await context.bot.send_photo(chat_id, photo=placeholder, caption=text + "\n\n*(–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–ª–æ–∂–∫—É)*", parse_mode=constants.ParseMode.MARKDOWN, reply_markup=markup)
                        message_sent = True
                    except Exception as e:
                        # 3. –ï—Å–ª–∏ –¥–∞–∂–µ —Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–º –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∏—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        print(f"[ERROR] Daily send: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ/–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–ª—è '{game_data.get('name')}' –≤ —á–∞—Ç {chat_id}. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞. –û—à–∏–±–∫–∞: {e}")
                        await context.bot.send_message(chat_id, text=text + "\n\n*(–û–±–ª–æ–∂–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)*", parse_mode=constants.ParseMode.MARKDOWN, reply_markup=markup)
                        message_sent = True

                if message_sent:
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –≤ —á–∞—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ñ–ª—É–¥–∞
                    await asyncio.sleep(1.0) 

    except Exception as e:
        print(f"[ERROR] –°–±–æ–π –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–µ: {e}")


# --- –°–ë–û–†–ö–ê –ò –ó–ê–ü–£–°–ö ---
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Telegram Bot API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–µ –ª–∏–º–∏—Ç—ã
    persistence = PicklePersistence(filepath="bot_data.pkl")
    application = (
        Application.builder()
        .token(TELEGRAM_BOT_TOKEN)
        .persistence(persistence)
        .build()
    )

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("releases", releases_command))
    # –û–±–Ω–æ–≤–ª—è–µ–º pattern, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ Attribute Error –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    application.add_handler(CallbackQueryHandler(pagination_handler, pattern="^page_(fwd|back)_"))
    application.add_handler(CallbackQueryHandler(lambda u, c: u.callback_query.answer(), pattern="^noop$"))

    # –î–æ–±–∞–≤–ª—è–µ–º JobQueue
    tz = ZoneInfo("Europe/Moscow")
    scheduled_time = time(hour=11, minute=0, tzinfo=tz)
    
    # –£–¥–∞–ª—è–µ–º job, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å, –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    current_jobs = application.job_queue.get_jobs_by_name("daily_game_check")
    if current_jobs:
        for job in current_jobs:
            job.schedule_removal()
            
    application.job_queue.run_daily(daily_check_job, scheduled_time, name="daily_game_check")

    print("[INFO] –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è polling
    application.run_polling(allowed_updates=Update.ALL_TYPES, timeout=30)


if __name__ == "__main__":
    main()
